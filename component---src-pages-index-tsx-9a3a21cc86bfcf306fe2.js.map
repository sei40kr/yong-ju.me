{"version":3,"file":"component---src-pages-index-tsx-9a3a21cc86bfcf306fe2.js","mappings":"4HAeMA,E,QAAYC,QAElB,a,mgECHMC,EAAe,SAACC,GAIpB,OAHaA,EAAUC,MAAM,EAAG,GAGhC,IAFWD,EAAUC,MAAM,EAAG,IAqB1BC,EAAe,SAACC,EAAqBC,GAAtB,OACnB,2BAASC,UAAU,2CAChBN,EAAaI,GADhB,KACgC,IACf,OAAdC,EAAqBL,EAAaK,GAAa,UACjC,OAAdA,EACG,IArBmB,SAACD,EAAqBC,GAC/C,IAAME,EAAYC,OAAOJ,EAAYF,MAAM,EAAG,IACxCO,EAAUD,OAAOJ,EAAYF,MAAM,EAAG,IAItCQ,EAA4B,IAHlBF,OAAOH,EAAUH,MAAM,EAAG,IAGrBK,IAFPC,OAAOH,EAAUH,MAAM,EAAG,IAEQO,EAAU,GACpDE,EAASD,EAAI,GACbE,GAASF,EAAIC,GAAU,GAE7B,OACa,IAAVC,EAAiBA,EAAjB,KAA6B,KACnB,IAAVA,GAA0B,IAAXD,EAAkBA,EAAjC,IAA6C,IASpCE,CAAmBT,EAAaC,GACtC,OA4CR,EArBgB,SAACS,GAAD,OACd,gBAAC,IAAD,CAAMC,QAAQ,UAAUT,UAAU,aAChC,0BACEU,KAAK,SACLV,UAAU,iCACVW,MAAO,CAAEC,gBAAiBJ,EAAMK,aAE/BhB,EAAaW,EAAMV,YAAaU,EAAMT,WACvC,sBAAIC,UAAU,2BAA2BQ,EAAMM,MAC/C,qBAAGd,UAAU,aACVQ,EAAMO,QADT,MACqBP,EAAMQ,WAG7B,wBAAMhB,UAAU,QACd,2BAASA,UAAU,kBACjB,yBAAIQ,EAAMS,cAjChB,GAD6BC,EAoCFV,EAAMU,iBAnCbC,OAClB,2BAASnB,UAAU,QACjB,sBAAIA,UAAU,qEAAd,mBAGA,0BACGkB,EAAgBE,KAAI,SAACC,EAAgBC,GAAjB,OACnB,sBACEC,IAAKD,EACLtB,UAAU,sHAETqB,QAKP,OAjBwB,IAACH,GC4B/B,EAdqB,SAACV,GAAD,OACnB,gBAAC,IAAD,CAAQgB,SAAUhB,EAAMiB,KAAKC,KAAKC,aAAaH,UAC7C,uBAAKxB,UAAU,eACb,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAS4B,GAAG,YAAYC,QAAM,GAA9B,YAGA,gBAAC,IAAD,CAASD,GAAG,WAAZ,WAEF,gBAAC,IAAD,KA7BiB,SAACE,GAAD,OACrB,uBAAK9B,UAAU,QACZ8B,EAASV,KAAI,SAACW,EAAST,GAAV,OACZ,gBAAC,EAAD,CACEC,IAAKD,EACLxB,YAAaiC,EAAQjC,YACrBC,UAAWgC,EAAQhC,UACnBe,KAAMiB,EAAQjB,KACdC,QAASgB,EAAQhB,QACjBC,SAAUe,EAAQf,SAClBH,WAAYkB,EAAQlB,WACpBI,YAAac,EAAQd,YACrBC,gBAAiBa,EAAQb,gBAAgBE,KACvC,SAACC,GAAD,OAAoBA,EAAeW,iBAgB3BC,CAAeH","sources":["webpack://yong-ju.me/./src/pages/index.tsx","webpack://yong-ju.me/./src/components/project.tsx","webpack://yong-ju.me/./src/pages/projects.tsx"],"sourcesContent":["import { graphql } from \"gatsby\";\nimport ProjectsPage from \"./projects\";\n\n// Please note that you can use https://github.com/dotansimha/graphql-code-generator\n// to generate all types from graphQL schema\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        siteName\n      }\n    }\n  }\n`;\n\nconst IndexPage = ProjectsPage;\n\nexport default IndexPage;\n","import React from \"react\";\nimport Card from \"../components/card\";\n\nexport interface ProjectProps {\n  startYYYYMM: string;\n  endYYYYMM: string | null;\n  name: string;\n  company: string;\n  workRole: string;\n  themeColor: string;\n  description: string;\n  accomplishments: string[];\n}\n\nconst formatYYYYMM = (strYYYYMM: string) => {\n  const yyyy = strYYYYMM.slice(0, 4);\n  const MM = strYYYYMM.slice(4, 6);\n\n  return `${yyyy}/${MM}`;\n};\n\nconst formatPeriodLength = (startYYYYMM: string, endYYYYMM: string) => {\n  const startYYYY = Number(startYYYYMM.slice(0, 4));\n  const startMM = Number(startYYYYMM.slice(4, 6));\n  const endYYYY = Number(endYYYYMM.slice(0, 4));\n  const endMM = Number(endYYYYMM.slice(4, 6));\n\n  const t = (endYYYY - startYYYY) * 12 + (endMM - startMM + 1);\n  const months = t % 12;\n  const years = (t - months) / 12;\n\n  return (\n    (years !== 0 ? `${years}y ` : \"\") +\n    (years === 0 || months !== 0 ? `${months}m` : \"\")\n  );\n};\n\nconst renderPeriod = (startYYYYMM: string, endYYYYMM: string | null) => (\n  <section className=\"mb-2 text-right text-base text-white/60\">\n    {formatYYYYMM(startYYYYMM)} –{\" \"}\n    {endYYYYMM !== null ? formatYYYYMM(endYYYYMM) : \"working\"}\n    {endYYYYMM !== null\n      ? \"・\" + formatPeriodLength(startYYYYMM, endYYYYMM)\n      : null}\n  </section>\n);\n\nconst renderAccomplishments = (accomplishments: string[]) =>\n  0 < accomplishments.length ? (\n    <section className=\"mb-4\">\n      <h4 className=\"mb-1 font-montserrat text-sm font-medium uppercase text-slate-500\">\n        Accomplishments\n      </h4>\n      <ul>\n        {accomplishments.map((accomplishment, i) => (\n          <li\n            key={i}\n            className=\"text-base before:-ml-8 before:inline-block before:w-8 before:text-right before:text-slate-500 before:content-['・']\"\n          >\n            {accomplishment}\n          </li>\n        ))}\n      </ul>\n    </section>\n  ) : null;\n\nconst Project = (props: ProjectProps) => (\n  <Card tagName=\"article\" className=\"mb-8 pb-1\">\n    <header\n      role=\"banner\"\n      className=\"mb-4 px-8 pb-4 pt-3 text-white\"\n      style={{ backgroundColor: props.themeColor }}\n    >\n      {renderPeriod(props.startYYYYMM, props.endYYYYMM)}\n      <h3 className=\"mb-1 text-2xl font-bold\">{props.name}</h3>\n      <p className=\"text-base\">\n        {props.company} / {props.workRole}\n      </p>\n    </header>\n    <main className=\"px-8\">\n      <section className=\"mb-4 text-base\">\n        <p>{props.description}</p>\n      </section>\n      {renderAccomplishments(props.accomplishments)}\n    </main>\n  </Card>\n);\nexport default Project;\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport projects from \"../../content/projects.yaml\";\nimport Container from \"../components/container\";\nimport Layout from \"../components/layout\";\nimport { Nav, NavItem } from \"../components/nav\";\nimport Project from \"../components/project\";\n\ninterface ProjectModel {\n  startYYYYMM: string;\n  endYYYYMM: string;\n  name: string;\n  company: string;\n  workRole: string;\n  themeColor: string;\n  description: string;\n  accomplishments: Array<{ content: string }>;\n}\n\ninterface ProjectsPageProps {\n  data: {\n    site: {\n      siteMetadata: {\n        siteName: string;\n      };\n    };\n  };\n}\n\n// Please note that you can use https://github.com/dotansimha/graphql-code-generator\n// to generate all types from graphQL schema\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        siteName\n      }\n    }\n  }\n`;\n\nconst renderProjects = (projects: ProjectModel[]) => (\n  <div className=\"my-8\">\n    {projects.map((project, i) => (\n      <Project\n        key={i}\n        startYYYYMM={project.startYYYYMM}\n        endYYYYMM={project.endYYYYMM}\n        name={project.name}\n        company={project.company}\n        workRole={project.workRole}\n        themeColor={project.themeColor}\n        description={project.description}\n        accomplishments={project.accomplishments.map(\n          (accomplishment) => accomplishment.content\n        )}\n      />\n    ))}\n  </div>\n);\n\nconst ProjectsPage = (props: ProjectsPageProps) => (\n  <Layout siteName={props.data.site.siteMetadata.siteName}>\n    <div className=\"bg-gray-100\">\n      <Nav>\n        <NavItem to=\"/projects\" active>\n          Projects\n        </NavItem>\n        <NavItem to=\"/skills\">Skills</NavItem>\n      </Nav>\n      <Container>{renderProjects(projects)}</Container>\n    </div>\n  </Layout>\n);\n\nexport default ProjectsPage;\n"],"names":["IndexPage","ProjectsPage","formatYYYYMM","strYYYYMM","slice","renderPeriod","startYYYYMM","endYYYYMM","className","startYYYY","Number","startMM","t","months","years","formatPeriodLength","props","tagName","role","style","backgroundColor","themeColor","name","company","workRole","description","accomplishments","length","map","accomplishment","i","key","siteName","data","site","siteMetadata","to","active","projects","project","content","renderProjects"],"sourceRoot":""}